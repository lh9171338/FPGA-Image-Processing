// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit2022_p (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mat0_rows_V_dout,
        mat0_rows_V_empty_n,
        mat0_rows_V_read,
        mat0_cols_V_dout,
        mat0_cols_V_empty_n,
        mat0_cols_V_read,
        mat0_data_stream_0_V_dout,
        mat0_data_stream_0_V_empty_n,
        mat0_data_stream_0_V_read,
        arr0_val_address0,
        arr0_val_ce0,
        arr0_val_we0,
        arr0_val_d0,
        arr0_rows_out_din,
        arr0_rows_out_full_n,
        arr0_rows_out_write,
        arr0_cols_out_din,
        arr0_cols_out_full_n,
        arr0_cols_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mat0_rows_V_dout;
input   mat0_rows_V_empty_n;
output   mat0_rows_V_read;
input  [31:0] mat0_cols_V_dout;
input   mat0_cols_V_empty_n;
output   mat0_cols_V_read;
input  [7:0] mat0_data_stream_0_V_dout;
input   mat0_data_stream_0_V_empty_n;
output   mat0_data_stream_0_V_read;
output  [15:0] arr0_val_address0;
output   arr0_val_ce0;
output   arr0_val_we0;
output  [7:0] arr0_val_d0;
output  [31:0] arr0_rows_out_din;
input   arr0_rows_out_full_n;
output   arr0_rows_out_write;
output  [31:0] arr0_cols_out_din;
input   arr0_cols_out_full_n;
output   arr0_cols_out_write;
output  [31:0] ap_return_0;
output  [1:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat0_rows_V_read;
reg mat0_cols_V_read;
reg mat0_data_stream_0_V_read;
reg arr0_rows_out_write;
reg arr0_cols_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mat0_rows_V_blk_n;
reg    mat0_cols_V_blk_n;
reg    arr0_rows_out_blk_n;
wire    ap_CS_fsm_state2;
reg    arr0_cols_out_blk_n;
reg   [31:0] mat0_rows_V_read_reg_108;
reg    ap_block_state1;
reg   [31:0] mat0_cols_V_read_reg_113;
wire    grp_Mat2Array2D_fu_58_ap_start;
wire    grp_Mat2Array2D_fu_58_ap_done;
wire    grp_Mat2Array2D_fu_58_ap_idle;
wire    grp_Mat2Array2D_fu_58_ap_ready;
wire    grp_Mat2Array2D_fu_58_mat_data_stream_V_read;
wire   [15:0] grp_Mat2Array2D_fu_58_arr_val_address0;
wire    grp_Mat2Array2D_fu_58_arr_val_ce0;
wire    grp_Mat2Array2D_fu_58_arr_val_we0;
wire   [7:0] grp_Mat2Array2D_fu_58_arr_val_d0;
wire   [31:0] grp_Mat2Array2D_fu_58_ap_return_0;
wire   [31:0] grp_Mat2Array2D_fu_58_ap_return_1;
wire   [31:0] grp_Mat2Array2D_fu_58_ap_return_2;
wire   [31:0] grp_Mat2Array2D_fu_58_ap_return_3;
reg    grp_Mat2Array2D_fu_58_ap_start_reg;
reg    ap_block_state1_ignore_call5;
reg    ap_block_state2;
wire   [31:0] tmp_4_out_fu_88_p1;
wire   [1:0] tmp_fu_92_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_Mat2Array2D_fu_58_ap_start_reg = 1'b0;
end

Mat2Array2D grp_Mat2Array2D_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Mat2Array2D_fu_58_ap_start),
    .ap_done(grp_Mat2Array2D_fu_58_ap_done),
    .ap_idle(grp_Mat2Array2D_fu_58_ap_idle),
    .ap_ready(grp_Mat2Array2D_fu_58_ap_ready),
    .mat_rows_V_read(mat0_rows_V_read_reg_108),
    .mat_cols_V_read(mat0_cols_V_read_reg_113),
    .mat_data_stream_V_dout(mat0_data_stream_0_V_dout),
    .mat_data_stream_V_empty_n(mat0_data_stream_0_V_empty_n),
    .mat_data_stream_V_read(grp_Mat2Array2D_fu_58_mat_data_stream_V_read),
    .arr_val_address0(grp_Mat2Array2D_fu_58_arr_val_address0),
    .arr_val_ce0(grp_Mat2Array2D_fu_58_arr_val_ce0),
    .arr_val_we0(grp_Mat2Array2D_fu_58_arr_val_we0),
    .arr_val_d0(grp_Mat2Array2D_fu_58_arr_val_d0),
    .ap_return_0(grp_Mat2Array2D_fu_58_ap_return_0),
    .ap_return_1(grp_Mat2Array2D_fu_58_ap_return_1),
    .ap_return_2(grp_Mat2Array2D_fu_58_ap_return_2),
    .ap_return_3(grp_Mat2Array2D_fu_58_ap_return_3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Mat2Array2D_fu_58_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_Mat2Array2D_fu_58_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2Array2D_fu_58_ap_ready == 1'b1)) begin
            grp_Mat2Array2D_fu_58_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat0_cols_V_read_reg_113 <= mat0_cols_V_dout;
        mat0_rows_V_read_reg_108 <= mat0_rows_V_dout;
    end
end

always @ (*) begin
    if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        arr0_cols_out_blk_n = arr0_cols_out_full_n;
    end else begin
        arr0_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        arr0_cols_out_write = 1'b1;
    end else begin
        arr0_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        arr0_rows_out_blk_n = arr0_rows_out_full_n;
    end else begin
        arr0_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        arr0_rows_out_write = 1'b1;
    end else begin
        arr0_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat0_cols_V_blk_n = mat0_cols_V_empty_n;
    end else begin
        mat0_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat0_cols_V_read = 1'b1;
    end else begin
        mat0_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mat0_data_stream_0_V_read = grp_Mat2Array2D_fu_58_mat_data_stream_V_read;
    end else begin
        mat0_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat0_rows_V_blk_n = mat0_rows_V_empty_n;
    end else begin
        mat0_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat0_rows_V_read = 1'b1;
    end else begin
        mat0_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((grp_Mat2Array2D_fu_58_ap_done == 1'b0) | (arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_start == 1'b0) | (mat0_cols_V_empty_n == 1'b0) | (mat0_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((arr0_cols_out_full_n == 1'b0) | (arr0_rows_out_full_n == 1'b0));
end

assign ap_return_0 = tmp_4_out_fu_88_p1;

assign ap_return_1 = tmp_fu_92_p1;

assign arr0_cols_out_din = grp_Mat2Array2D_fu_58_ap_return_1;

assign arr0_rows_out_din = grp_Mat2Array2D_fu_58_ap_return_0;

assign arr0_val_address0 = grp_Mat2Array2D_fu_58_arr_val_address0;

assign arr0_val_ce0 = grp_Mat2Array2D_fu_58_arr_val_ce0;

assign arr0_val_d0 = grp_Mat2Array2D_fu_58_arr_val_d0;

assign arr0_val_we0 = grp_Mat2Array2D_fu_58_arr_val_we0;

assign grp_Mat2Array2D_fu_58_ap_start = grp_Mat2Array2D_fu_58_ap_start_reg;

assign tmp_4_out_fu_88_p1 = grp_Mat2Array2D_fu_58_ap_return_2;

assign tmp_fu_92_p1 = grp_Mat2Array2D_fu_58_ap_return_3[1:0];

endmodule //Block_Mat_exit2022_p

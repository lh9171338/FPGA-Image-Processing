-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_Mat_exit2628_p is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mat0_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mat0_rows_V_empty_n : IN STD_LOGIC;
    mat0_rows_V_read : OUT STD_LOGIC;
    mat0_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mat0_cols_V_empty_n : IN STD_LOGIC;
    mat0_cols_V_read : OUT STD_LOGIC;
    mat0_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    mat0_data_stream_0_V_empty_n : IN STD_LOGIC;
    mat0_data_stream_0_V_read : OUT STD_LOGIC;
    arr0_val_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    arr0_val_ce0 : OUT STD_LOGIC;
    arr0_val_we0 : OUT STD_LOGIC;
    arr0_val_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arr0_rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr0_rows_out_full_n : IN STD_LOGIC;
    arr0_rows_out_write : OUT STD_LOGIC;
    arr0_cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr0_cols_out_full_n : IN STD_LOGIC;
    arr0_cols_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Block_Mat_exit2628_p is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mat0_rows_V_blk_n : STD_LOGIC;
    signal mat0_cols_V_blk_n : STD_LOGIC;
    signal arr0_rows_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal arr0_cols_out_blk_n : STD_LOGIC;
    signal mat0_rows_V_read_reg_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mat0_cols_V_read_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_start : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_ap_done : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_ap_idle : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_ap_ready : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_mat_data_stream_V_read : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_arr_val_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Mat2Array2D_fu_58_arr_val_ce0 : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_arr_val_we0 : STD_LOGIC;
    signal grp_Mat2Array2D_fu_58_arr_val_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Mat2Array2D_fu_58_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call5 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_out_fu_88_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_92_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component Mat2Array2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        mat_rows_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_cols_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        mat_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mat_data_stream_V_empty_n : IN STD_LOGIC;
        mat_data_stream_V_read : OUT STD_LOGIC;
        arr_val_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        arr_val_ce0 : OUT STD_LOGIC;
        arr_val_we0 : OUT STD_LOGIC;
        arr_val_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Mat2Array2D_fu_58 : component Mat2Array2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Mat2Array2D_fu_58_ap_start,
        ap_done => grp_Mat2Array2D_fu_58_ap_done,
        ap_idle => grp_Mat2Array2D_fu_58_ap_idle,
        ap_ready => grp_Mat2Array2D_fu_58_ap_ready,
        mat_rows_V_read => mat0_rows_V_read_reg_108,
        mat_cols_V_read => mat0_cols_V_read_reg_113,
        mat_data_stream_V_dout => mat0_data_stream_0_V_dout,
        mat_data_stream_V_empty_n => mat0_data_stream_0_V_empty_n,
        mat_data_stream_V_read => grp_Mat2Array2D_fu_58_mat_data_stream_V_read,
        arr_val_address0 => grp_Mat2Array2D_fu_58_arr_val_address0,
        arr_val_ce0 => grp_Mat2Array2D_fu_58_arr_val_ce0,
        arr_val_we0 => grp_Mat2Array2D_fu_58_arr_val_we0,
        arr_val_d0 => grp_Mat2Array2D_fu_58_arr_val_d0,
        ap_return_0 => grp_Mat2Array2D_fu_58_ap_return_0,
        ap_return_1 => grp_Mat2Array2D_fu_58_ap_return_1,
        ap_return_2 => grp_Mat2Array2D_fu_58_ap_return_2,
        ap_return_3 => grp_Mat2Array2D_fu_58_ap_return_3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Mat2Array2D_fu_58_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Mat2Array2D_fu_58_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_Mat2Array2D_fu_58_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Mat2Array2D_fu_58_ap_ready = ap_const_logic_1)) then 
                    grp_Mat2Array2D_fu_58_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mat0_cols_V_read_reg_113 <= mat0_cols_V_dout;
                mat0_rows_V_read_reg_108 <= mat0_rows_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, mat0_rows_V_empty_n, mat0_cols_V_empty_n, arr0_rows_out_full_n, arr0_cols_out_full_n, ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mat0_rows_V_empty_n, mat0_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call5_assign_proc : process(ap_start, ap_done_reg, mat0_rows_V_empty_n, mat0_cols_V_empty_n)
    begin
                ap_block_state1_ignore_call5 <= ((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(arr0_rows_out_full_n, arr0_cols_out_full_n)
    begin
                ap_block_state2 <= ((arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, arr0_rows_out_full_n, arr0_cols_out_full_n, ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_ap_done)
    begin
        if ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(arr0_rows_out_full_n, arr0_cols_out_full_n, ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_ap_done)
    begin
        if ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= tmp_out_fu_88_p1;
    ap_return_1 <= tmp_fu_92_p1;

    arr0_cols_out_blk_n_assign_proc : process(arr0_cols_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr0_cols_out_blk_n <= arr0_cols_out_full_n;
        else 
            arr0_cols_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arr0_cols_out_din <= grp_Mat2Array2D_fu_58_ap_return_1;

    arr0_cols_out_write_assign_proc : process(arr0_rows_out_full_n, arr0_cols_out_full_n, ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_ap_done)
    begin
        if ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            arr0_cols_out_write <= ap_const_logic_1;
        else 
            arr0_cols_out_write <= ap_const_logic_0;
        end if; 
    end process;


    arr0_rows_out_blk_n_assign_proc : process(arr0_rows_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            arr0_rows_out_blk_n <= arr0_rows_out_full_n;
        else 
            arr0_rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arr0_rows_out_din <= grp_Mat2Array2D_fu_58_ap_return_0;

    arr0_rows_out_write_assign_proc : process(arr0_rows_out_full_n, arr0_cols_out_full_n, ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_ap_done)
    begin
        if ((not(((grp_Mat2Array2D_fu_58_ap_done = ap_const_logic_0) or (arr0_cols_out_full_n = ap_const_logic_0) or (arr0_rows_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            arr0_rows_out_write <= ap_const_logic_1;
        else 
            arr0_rows_out_write <= ap_const_logic_0;
        end if; 
    end process;

    arr0_val_address0 <= grp_Mat2Array2D_fu_58_arr_val_address0;
    arr0_val_ce0 <= grp_Mat2Array2D_fu_58_arr_val_ce0;
    arr0_val_d0 <= grp_Mat2Array2D_fu_58_arr_val_d0;
    arr0_val_we0 <= grp_Mat2Array2D_fu_58_arr_val_we0;
    grp_Mat2Array2D_fu_58_ap_start <= grp_Mat2Array2D_fu_58_ap_start_reg;

    mat0_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mat0_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat0_cols_V_blk_n <= mat0_cols_V_empty_n;
        else 
            mat0_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat0_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mat0_rows_V_empty_n, mat0_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat0_cols_V_read <= ap_const_logic_1;
        else 
            mat0_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    mat0_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_state2, grp_Mat2Array2D_fu_58_mat_data_stream_V_read)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mat0_data_stream_0_V_read <= grp_Mat2Array2D_fu_58_mat_data_stream_V_read;
        else 
            mat0_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    mat0_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mat0_rows_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat0_rows_V_blk_n <= mat0_rows_V_empty_n;
        else 
            mat0_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mat0_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mat0_rows_V_empty_n, mat0_cols_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mat0_cols_V_empty_n = ap_const_logic_0) or (mat0_rows_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mat0_rows_V_read <= ap_const_logic_1;
        else 
            mat0_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_92_p1 <= grp_Mat2Array2D_fu_58_ap_return_3(2 - 1 downto 0);
    tmp_out_fu_88_p1 <= grp_Mat2Array2D_fu_58_ap_return_2;
end behav;

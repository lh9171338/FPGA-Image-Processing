-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (28 downto 0);
    prescale : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of scaled_fixed2ieee is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_277_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_486 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_491 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_fu_315_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_505 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_2_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_shift_V_fu_379_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal out_bits_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_ce0 : STD_LOGIC;
    signal out_bits_V_we0 : STD_LOGIC;
    signal out_bits_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_V_ce1 : STD_LOGIC;
    signal out_bits_V_we1 : STD_LOGIC;
    signal out_bits_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_ce0 : STD_LOGIC;
    signal c_we0 : STD_LOGIC;
    signal c_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_shift_reg_162 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_s_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_184 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_Val2_in_phi_fu_198_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_in_reg_195 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_phi_mux_shift_1_phi_fu_208_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_225_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_246_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_250_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_34_fu_288_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_333_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_371_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_24_fu_375_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_2_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_cast_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_409_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp7_fu_432_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_27_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_V_fu_450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_25_fu_442_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_35_fu_458_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_write_assign_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component scaled_fixed2ieeecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component scaled_fixed2ieee_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    out_bits_V_U : component scaled_fixed2ieeecud
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_bits_V_address0,
        ce0 => out_bits_V_ce0,
        we0 => out_bits_V_we0,
        d0 => out_bits_V_d0,
        q0 => out_bits_V_q0,
        address1 => out_bits_V_address1,
        ce1 => out_bits_V_ce1,
        we1 => out_bits_V_we1,
        d1 => out_bits_V_d1);

    c_U : component scaled_fixed2ieee_c
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_address0,
        ce0 => c_ce0,
        we0 => c_we0,
        d0 => c_d0,
        q0 => c_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_21_reg_501 = ap_const_lv1_1) or (tmp_s_fu_388_p2 = ap_const_lv1_0)))) then 
                                        ap_return_preg(30 downto 0) <= result_write_assign_fu_468_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_reg_151 <= i_reg_486;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i1_reg_151 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i2_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_184 <= ap_const_lv2_0;
            elsif (((tmp_21_reg_501 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_388_p2 = ap_const_lv1_1))) then 
                i2_reg_184 <= i_1_reg_505;
            end if; 
        end if;
    end process;

    in_shift_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                in_shift_reg_162 <= in_V;
            elsif (((tmp_21_reg_501 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_388_p2 = ap_const_lv1_1))) then 
                in_shift_reg_162 <= in_shift_V_fu_379_p3;
            end if; 
        end if;
    end process;

    p_Val2_in_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_reg_501 = ap_const_lv1_0) and (tmp_s_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_Val2_in_reg_195 <= in_shift_V_fu_379_p3;
            elsif (((tmp_21_fu_307_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_in_reg_195 <= in_shift_reg_162;
            end if; 
        end if;
    end process;

    shift_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_reg_501 = ap_const_lv1_0) and (tmp_s_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                shift_1_reg_205 <= shift_2_fu_326_p2;
            elsif (((tmp_21_fu_307_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_1_reg_205 <= shift_reg_172;
            end if; 
        end if;
    end process;

    shift_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                shift_reg_172 <= ap_const_lv32_0;
            elsif (((tmp_21_reg_501 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_s_fu_388_p2 = ap_const_lv1_1))) then 
                shift_reg_172 <= shift_2_fu_326_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_505 <= i_1_fu_315_p2;
                tmp_21_reg_501 <= i2_reg_184(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_486 <= i_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_reg_491(1 downto 0) <= tmp_1_fu_283_p1(1 downto 0);
            end if;
        end if;
    end process;
    tmp_1_reg_491(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    ap_return_preg(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_271_p2, tmp_21_reg_501, ap_CS_fsm_state5, tmp_s_fu_388_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_21_reg_501 = ap_const_lv1_1) or (tmp_s_fu_388_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_21_reg_501, ap_CS_fsm_state5, tmp_s_fu_388_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_21_reg_501 = ap_const_lv1_1) or (tmp_s_fu_388_p2 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_in_phi_fu_198_p4_assign_proc : process(tmp_21_reg_501, ap_CS_fsm_state5, in_shift_V_fu_379_p3, tmp_s_fu_388_p2, p_Val2_in_reg_195)
    begin
        if (((tmp_21_reg_501 = ap_const_lv1_0) and (tmp_s_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_p_Val2_in_phi_fu_198_p4 <= in_shift_V_fu_379_p3;
        else 
            ap_phi_mux_p_Val2_in_phi_fu_198_p4 <= p_Val2_in_reg_195;
        end if; 
    end process;


    ap_phi_mux_shift_1_phi_fu_208_p4_assign_proc : process(tmp_21_reg_501, shift_2_fu_326_p2, ap_CS_fsm_state5, tmp_s_fu_388_p2, shift_1_reg_205)
    begin
        if (((tmp_21_reg_501 = ap_const_lv1_0) and (tmp_s_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_phi_mux_shift_1_phi_fu_208_p4 <= shift_2_fu_326_p2;
        else 
            ap_phi_mux_shift_1_phi_fu_208_p4 <= shift_1_reg_205;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_21_reg_501, ap_CS_fsm_state5, tmp_s_fu_388_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_21_reg_501 = ap_const_lv1_1) or (tmp_s_fu_388_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(tmp_21_reg_501, ap_CS_fsm_state5, tmp_s_fu_388_p2, result_write_assign_fu_468_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((tmp_21_reg_501 = ap_const_lv1_1) or (tmp_s_fu_388_p2 = ap_const_lv1_0)))) then 
            ap_return <= result_write_assign_fu_468_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    c_address0_assign_proc : process(tmp_1_reg_491, ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_4_fu_321_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_address0 <= tmp_4_fu_321_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_address0 <= tmp_1_reg_491(1 - 1 downto 0);
        else 
            c_address0 <= "X";
        end if; 
    end process;


    c_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    c_d0_proc : process(p_Result_34_fu_288_p4)
    begin
        c_d0 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_34_fu_288_p4(i) = '1' then
                c_d0 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    c_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_271_p2 <= "1" when (i1_reg_151 = ap_const_lv2_2) else "0";
    i_1_fu_315_p2 <= std_logic_vector(unsigned(i2_reg_184) + unsigned(ap_const_lv2_1));
    i_fu_277_p2 <= std_logic_vector(unsigned(i1_reg_151) + unsigned(ap_const_lv2_1));
    in_shift_V_fu_379_p3 <= 
        tmp_23_fu_371_p1 when (isNeg_fu_333_p3(0) = '1') else 
        tmp_24_fu_375_p1;
    isNeg_fu_333_p3 <= c_q0(31 downto 31);
    newexp_fu_403_p2 <= std_logic_vector(signed(tmp_10_cast_fu_399_p1) - signed(ap_phi_mux_shift_1_phi_fu_208_p4));
    or_cond_fu_422_p2 <= (tmp_26_fu_409_p3 or tmp_11_fu_417_p2);

    out_bits_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_1_fu_283_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_bits_V_address0 <= tmp_1_fu_283_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            out_bits_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            out_bits_V_address0 <= "X";
        end if; 
    end process;

    out_bits_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    out_bits_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            out_bits_V_ce0 <= ap_const_logic_1;
        else 
            out_bits_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_ce1 <= ap_const_logic_1;
        else 
            out_bits_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_bits_V_d0 <= (tmp_fu_225_p3 & ap_const_lv32_0(14 downto 0));
    out_bits_V_d1 <= (tmp_8_fu_250_p3 & ap_const_lv32_0(17 downto 0));

    out_bits_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_we0 <= ap_const_logic_1;
        else 
            out_bits_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_bits_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            out_bits_V_we1 <= ap_const_logic_1;
        else 
            out_bits_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    out_exp_V_fu_450_p3 <= 
        ap_const_lv8_0 when (or_cond_fu_422_p2(0) = '1') else 
        tmp_27_fu_428_p1;
    p_Result_1_fu_215_p4 <= in_V(28 downto 13);
    
    p_Result_34_fu_288_p4_proc : process(out_bits_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_34_fu_288_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_V_q0;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_34_fu_288_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_34_fu_288_p4_i) := out_bits_V_q0(32-1-p_Result_34_fu_288_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_34_fu_288_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_35_fu_458_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_450_p3) & p_Val2_25_fu_442_p3);
    p_Val2_25_fu_442_p3 <= 
        ap_const_lv23_0 when (or_cond_fu_422_p2(0) = '1') else 
        phitmp7_fu_432_p4;
    phitmp7_fu_432_p4 <= ap_phi_mux_p_Val2_in_phi_fu_198_p4(27 downto 5);
    result_write_assign_fu_468_p1 <= p_Result_35_fu_458_p4;
    sh_assign_1_fu_347_p3 <= 
        tmp_5_fu_341_p2 when (isNeg_fu_333_p3(0) = '1') else 
        c_q0;
    shift_2_fu_326_p2 <= std_logic_vector(unsigned(shift_reg_172) + unsigned(c_q0));
        tmp_10_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_394_p2),32));

    tmp_11_fu_417_p2 <= "1" when (in_V = ap_const_lv29_0) else "0";
    tmp_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_151),64));
    tmp_20_fu_246_p1 <= in_V(13 - 1 downto 0);
    tmp_21_fu_307_p3 <= i2_reg_184(1 downto 1);
    tmp_23_fu_371_p1 <= tmp_7_fu_365_p2(29 - 1 downto 0);
    tmp_24_fu_375_p1 <= tmp_9_fu_359_p2(29 - 1 downto 0);
    tmp_26_fu_409_p3 <= newexp_fu_403_p2(31 downto 31);
    tmp_27_fu_428_p1 <= newexp_fu_403_p2(8 - 1 downto 0);
    tmp_2_fu_394_p2 <= std_logic_vector(unsigned(ap_const_lv9_7F) - unsigned(prescale));
    tmp_4_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_184),64));
    tmp_5_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(c_q0));
    tmp_6_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_shift_reg_162),32));
    tmp_7_fu_365_p2 <= std_logic_vector(shift_right(unsigned(tmp_6_fu_355_p1),to_integer(unsigned('0' & sh_assign_1_fu_347_p3(31-1 downto 0)))));
    tmp_8_fu_250_p3 <= (tmp_20_fu_246_p1 & ap_const_lv1_1);
    tmp_9_fu_359_p2 <= std_logic_vector(shift_left(unsigned(tmp_6_fu_355_p1),to_integer(unsigned('0' & sh_assign_1_fu_347_p3(31-1 downto 0)))));
    tmp_fu_225_p3 <= (p_Result_1_fu_215_p4 & ap_const_lv1_1);
    tmp_s_fu_388_p2 <= "1" when (c_q0 = ap_const_lv32_10) else "0";
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GaussianBlur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    src_val_ce0 : OUT STD_LOGIC;
    src_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    src_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_rows_empty_n : IN STD_LOGIC;
    src_rows_read : OUT STD_LOGIC;
    src_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_empty_n : IN STD_LOGIC;
    src_cols_read : OUT STD_LOGIC;
    dst_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    dst_val_ce0 : OUT STD_LOGIC;
    dst_val_we0 : OUT STD_LOGIC;
    dst_val_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sigmaX_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sigmaX_empty_n : IN STD_LOGIC;
    sigmaX_read : OUT STD_LOGIC );
end;


architecture behav of GaussianBlur is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_rows_blk_n : STD_LOGIC;
    signal src_cols_blk_n : STD_LOGIC;
    signal sigmaX_blk_n : STD_LOGIC;
    signal sigmaX_read_reg_189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal src_rows_read_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal src_cols_read_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_0_V_0_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_getGaussianKernel_fu_48_ap_idle : STD_LOGIC;
    signal grp_getGaussianKernel_fu_48_ap_ready : STD_LOGIC;
    signal grp_getGaussianKernel_fu_48_ap_done : STD_LOGIC;
    signal kernel_val_0_V_1_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_0_V_2_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_0_V_3_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_0_V_4_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_1_V_0_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_1_V_1_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_1_V_2_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_1_V_3_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_1_V_4_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_0_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_1_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_2_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_3_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_2_V_4_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_3_V_0_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_3_V_1_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_3_V_2_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_3_V_3_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_3_V_4_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_4_V_0_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_4_V_1_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_4_V_2_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_4_V_3_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_val_4_V_4_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_start : STD_LOGIC;
    signal grp_getGaussianKernel_fu_48_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_16 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_17 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_18 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_19 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_20 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_21 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_22 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_23 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_return_24 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Filter2D_fu_54_ap_start : STD_LOGIC;
    signal grp_Filter2D_fu_54_ap_done : STD_LOGIC;
    signal grp_Filter2D_fu_54_ap_idle : STD_LOGIC;
    signal grp_Filter2D_fu_54_ap_ready : STD_LOGIC;
    signal grp_Filter2D_fu_54_src_val_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_Filter2D_fu_54_src_val_ce0 : STD_LOGIC;
    signal grp_Filter2D_fu_54_dst_val_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_Filter2D_fu_54_dst_val_ce0 : STD_LOGIC;
    signal grp_Filter2D_fu_54_dst_val_we0 : STD_LOGIC;
    signal grp_Filter2D_fu_54_dst_val_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_getGaussianKernel_fu_48_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call4 : BOOLEAN;
    signal grp_Filter2D_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component getGaussianKernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sigmaX : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        src_val_ce0 : OUT STD_LOGIC;
        src_val_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        src_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_0_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_1_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_2_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_3_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_val_4_V_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_val_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        dst_val_ce0 : OUT STD_LOGIC;
        dst_val_we0 : OUT STD_LOGIC;
        dst_val_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_getGaussianKernel_fu_48 : component getGaussianKernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getGaussianKernel_fu_48_ap_start,
        ap_done => grp_getGaussianKernel_fu_48_ap_done,
        ap_idle => grp_getGaussianKernel_fu_48_ap_idle,
        ap_ready => grp_getGaussianKernel_fu_48_ap_ready,
        sigmaX => sigmaX_read_reg_189,
        ap_return_0 => grp_getGaussianKernel_fu_48_ap_return_0,
        ap_return_1 => grp_getGaussianKernel_fu_48_ap_return_1,
        ap_return_2 => grp_getGaussianKernel_fu_48_ap_return_2,
        ap_return_3 => grp_getGaussianKernel_fu_48_ap_return_3,
        ap_return_4 => grp_getGaussianKernel_fu_48_ap_return_4,
        ap_return_5 => grp_getGaussianKernel_fu_48_ap_return_5,
        ap_return_6 => grp_getGaussianKernel_fu_48_ap_return_6,
        ap_return_7 => grp_getGaussianKernel_fu_48_ap_return_7,
        ap_return_8 => grp_getGaussianKernel_fu_48_ap_return_8,
        ap_return_9 => grp_getGaussianKernel_fu_48_ap_return_9,
        ap_return_10 => grp_getGaussianKernel_fu_48_ap_return_10,
        ap_return_11 => grp_getGaussianKernel_fu_48_ap_return_11,
        ap_return_12 => grp_getGaussianKernel_fu_48_ap_return_12,
        ap_return_13 => grp_getGaussianKernel_fu_48_ap_return_13,
        ap_return_14 => grp_getGaussianKernel_fu_48_ap_return_14,
        ap_return_15 => grp_getGaussianKernel_fu_48_ap_return_15,
        ap_return_16 => grp_getGaussianKernel_fu_48_ap_return_16,
        ap_return_17 => grp_getGaussianKernel_fu_48_ap_return_17,
        ap_return_18 => grp_getGaussianKernel_fu_48_ap_return_18,
        ap_return_19 => grp_getGaussianKernel_fu_48_ap_return_19,
        ap_return_20 => grp_getGaussianKernel_fu_48_ap_return_20,
        ap_return_21 => grp_getGaussianKernel_fu_48_ap_return_21,
        ap_return_22 => grp_getGaussianKernel_fu_48_ap_return_22,
        ap_return_23 => grp_getGaussianKernel_fu_48_ap_return_23,
        ap_return_24 => grp_getGaussianKernel_fu_48_ap_return_24);

    grp_Filter2D_fu_54 : component Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Filter2D_fu_54_ap_start,
        ap_done => grp_Filter2D_fu_54_ap_done,
        ap_idle => grp_Filter2D_fu_54_ap_idle,
        ap_ready => grp_Filter2D_fu_54_ap_ready,
        src_val_address0 => grp_Filter2D_fu_54_src_val_address0,
        src_val_ce0 => grp_Filter2D_fu_54_src_val_ce0,
        src_val_q0 => src_val_q0,
        src_rows_read => src_rows_read_reg_194,
        src_cols_read => src_cols_read_reg_199,
        kernel_val_0_V_0_read => kernel_val_0_V_0_reg_204,
        kernel_val_0_V_1_read => kernel_val_0_V_1_reg_209,
        kernel_val_0_V_2_read => kernel_val_0_V_2_reg_214,
        kernel_val_0_V_3_read => kernel_val_0_V_3_reg_219,
        kernel_val_0_V_4_read => kernel_val_0_V_4_reg_224,
        kernel_val_1_V_0_read => kernel_val_1_V_0_reg_229,
        kernel_val_1_V_1_read => kernel_val_1_V_1_reg_234,
        kernel_val_1_V_2_read => kernel_val_1_V_2_reg_239,
        kernel_val_1_V_3_read => kernel_val_1_V_3_reg_244,
        kernel_val_1_V_4_read => kernel_val_1_V_4_reg_249,
        kernel_val_2_V_0_read => kernel_val_2_V_0_reg_254,
        kernel_val_2_V_1_read => kernel_val_2_V_1_reg_259,
        kernel_val_2_V_2_read => kernel_val_2_V_2_reg_264,
        kernel_val_2_V_3_read => kernel_val_2_V_3_reg_269,
        kernel_val_2_V_4_read => kernel_val_2_V_4_reg_274,
        kernel_val_3_V_0_read => kernel_val_3_V_0_reg_279,
        kernel_val_3_V_1_read => kernel_val_3_V_1_reg_284,
        kernel_val_3_V_2_read => kernel_val_3_V_2_reg_289,
        kernel_val_3_V_3_read => kernel_val_3_V_3_reg_294,
        kernel_val_3_V_4_read => kernel_val_3_V_4_reg_299,
        kernel_val_4_V_0_read => kernel_val_4_V_0_reg_304,
        kernel_val_4_V_1_read => kernel_val_4_V_1_reg_309,
        kernel_val_4_V_2_read => kernel_val_4_V_2_reg_314,
        kernel_val_4_V_3_read => kernel_val_4_V_3_reg_319,
        kernel_val_4_V_4_read => kernel_val_4_V_4_reg_324,
        dst_val_address0 => grp_Filter2D_fu_54_dst_val_address0,
        dst_val_ce0 => grp_Filter2D_fu_54_dst_val_ce0,
        dst_val_we0 => grp_Filter2D_fu_54_dst_val_we0,
        dst_val_d0 => grp_Filter2D_fu_54_dst_val_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Filter2D_fu_54_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Filter2D_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Filter2D_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Filter2D_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Filter2D_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_Filter2D_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getGaussianKernel_fu_48_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getGaussianKernel_fu_48_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_getGaussianKernel_fu_48_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getGaussianKernel_fu_48_ap_ready = ap_const_logic_1)) then 
                    grp_getGaussianKernel_fu_48_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_getGaussianKernel_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                kernel_val_0_V_0_reg_204 <= grp_getGaussianKernel_fu_48_ap_return_0;
                kernel_val_0_V_1_reg_209 <= grp_getGaussianKernel_fu_48_ap_return_1;
                kernel_val_0_V_2_reg_214 <= grp_getGaussianKernel_fu_48_ap_return_2;
                kernel_val_0_V_3_reg_219 <= grp_getGaussianKernel_fu_48_ap_return_3;
                kernel_val_0_V_4_reg_224 <= grp_getGaussianKernel_fu_48_ap_return_4;
                kernel_val_1_V_0_reg_229 <= grp_getGaussianKernel_fu_48_ap_return_5;
                kernel_val_1_V_1_reg_234 <= grp_getGaussianKernel_fu_48_ap_return_6;
                kernel_val_1_V_2_reg_239 <= grp_getGaussianKernel_fu_48_ap_return_7;
                kernel_val_1_V_3_reg_244 <= grp_getGaussianKernel_fu_48_ap_return_8;
                kernel_val_1_V_4_reg_249 <= grp_getGaussianKernel_fu_48_ap_return_9;
                kernel_val_2_V_0_reg_254 <= grp_getGaussianKernel_fu_48_ap_return_10;
                kernel_val_2_V_1_reg_259 <= grp_getGaussianKernel_fu_48_ap_return_11;
                kernel_val_2_V_2_reg_264 <= grp_getGaussianKernel_fu_48_ap_return_12;
                kernel_val_2_V_3_reg_269 <= grp_getGaussianKernel_fu_48_ap_return_13;
                kernel_val_2_V_4_reg_274 <= grp_getGaussianKernel_fu_48_ap_return_14;
                kernel_val_3_V_0_reg_279 <= grp_getGaussianKernel_fu_48_ap_return_15;
                kernel_val_3_V_1_reg_284 <= grp_getGaussianKernel_fu_48_ap_return_16;
                kernel_val_3_V_2_reg_289 <= grp_getGaussianKernel_fu_48_ap_return_17;
                kernel_val_3_V_3_reg_294 <= grp_getGaussianKernel_fu_48_ap_return_18;
                kernel_val_3_V_4_reg_299 <= grp_getGaussianKernel_fu_48_ap_return_19;
                kernel_val_4_V_0_reg_304 <= grp_getGaussianKernel_fu_48_ap_return_20;
                kernel_val_4_V_1_reg_309 <= grp_getGaussianKernel_fu_48_ap_return_21;
                kernel_val_4_V_2_reg_314 <= grp_getGaussianKernel_fu_48_ap_return_22;
                kernel_val_4_V_3_reg_319 <= grp_getGaussianKernel_fu_48_ap_return_23;
                kernel_val_4_V_4_reg_324 <= grp_getGaussianKernel_fu_48_ap_return_24;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sigmaX_read_reg_189 <= sigmaX_dout;
                src_cols_read_reg_199 <= src_cols_dout;
                src_rows_read_reg_194 <= src_rows_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n, ap_CS_fsm_state2, grp_getGaussianKernel_fu_48_ap_done, grp_Filter2D_fu_54_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_getGaussianKernel_fu_48_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Filter2D_fu_54_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call4_assign_proc : process(ap_start, ap_done_reg, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n)
    begin
                ap_block_state1_ignore_call4 <= ((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Filter2D_fu_54_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Filter2D_fu_54_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Filter2D_fu_54_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Filter2D_fu_54_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dst_val_address0 <= grp_Filter2D_fu_54_dst_val_address0;
    dst_val_ce0 <= grp_Filter2D_fu_54_dst_val_ce0;
    dst_val_d0 <= grp_Filter2D_fu_54_dst_val_d0;
    dst_val_we0 <= grp_Filter2D_fu_54_dst_val_we0;
    grp_Filter2D_fu_54_ap_start <= grp_Filter2D_fu_54_ap_start_reg;
    grp_getGaussianKernel_fu_48_ap_start <= grp_getGaussianKernel_fu_48_ap_start_reg;

    sigmaX_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, sigmaX_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sigmaX_blk_n <= sigmaX_empty_n;
        else 
            sigmaX_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sigmaX_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sigmaX_read <= ap_const_logic_1;
        else 
            sigmaX_read <= ap_const_logic_0;
        end if; 
    end process;


    src_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_blk_n <= src_cols_empty_n;
        else 
            src_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_cols_read <= ap_const_logic_1;
        else 
            src_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    src_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_blk_n <= src_rows_empty_n;
        else 
            src_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_rows_empty_n, src_cols_empty_n, sigmaX_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (sigmaX_empty_n = ap_const_logic_0) or (src_cols_empty_n = ap_const_logic_0) or (src_rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_rows_read <= ap_const_logic_1;
        else 
            src_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    src_val_address0 <= grp_Filter2D_fu_54_src_val_address0;
    src_val_ce0 <= grp_Filter2D_fu_54_src_val_ce0;
end behav;

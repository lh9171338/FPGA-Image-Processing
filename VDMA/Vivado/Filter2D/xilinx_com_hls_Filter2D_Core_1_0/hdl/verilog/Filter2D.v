// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Filter2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_val_address0,
        src_val_ce0,
        src_val_q0,
        src_rows_read,
        src_cols_read,
        kernel_val_0_V_0_read,
        kernel_val_0_V_1_read,
        kernel_val_0_V_2_read,
        kernel_val_0_V_3_read,
        kernel_val_0_V_4_read,
        kernel_val_1_V_0_read,
        kernel_val_1_V_1_read,
        kernel_val_1_V_2_read,
        kernel_val_1_V_3_read,
        kernel_val_1_V_4_read,
        kernel_val_2_V_0_read,
        kernel_val_2_V_1_read,
        kernel_val_2_V_2_read,
        kernel_val_2_V_3_read,
        kernel_val_2_V_4_read,
        kernel_val_3_V_0_read,
        kernel_val_3_V_1_read,
        kernel_val_3_V_2_read,
        kernel_val_3_V_3_read,
        kernel_val_3_V_4_read,
        kernel_val_4_V_0_read,
        kernel_val_4_V_1_read,
        kernel_val_4_V_2_read,
        kernel_val_4_V_3_read,
        kernel_val_4_V_4_read,
        dst_val_address0,
        dst_val_ce0,
        dst_val_we0,
        dst_val_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state8 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] src_val_address0;
output   src_val_ce0;
input  [7:0] src_val_q0;
input  [31:0] src_rows_read;
input  [31:0] src_cols_read;
input  [31:0] kernel_val_0_V_0_read;
input  [31:0] kernel_val_0_V_1_read;
input  [31:0] kernel_val_0_V_2_read;
input  [31:0] kernel_val_0_V_3_read;
input  [31:0] kernel_val_0_V_4_read;
input  [31:0] kernel_val_1_V_0_read;
input  [31:0] kernel_val_1_V_1_read;
input  [31:0] kernel_val_1_V_2_read;
input  [31:0] kernel_val_1_V_3_read;
input  [31:0] kernel_val_1_V_4_read;
input  [31:0] kernel_val_2_V_0_read;
input  [31:0] kernel_val_2_V_1_read;
input  [31:0] kernel_val_2_V_2_read;
input  [31:0] kernel_val_2_V_3_read;
input  [31:0] kernel_val_2_V_4_read;
input  [31:0] kernel_val_3_V_0_read;
input  [31:0] kernel_val_3_V_1_read;
input  [31:0] kernel_val_3_V_2_read;
input  [31:0] kernel_val_3_V_3_read;
input  [31:0] kernel_val_3_V_4_read;
input  [31:0] kernel_val_4_V_0_read;
input  [31:0] kernel_val_4_V_1_read;
input  [31:0] kernel_val_4_V_2_read;
input  [31:0] kernel_val_4_V_3_read;
input  [31:0] kernel_val_4_V_4_read;
output  [17:0] dst_val_address0;
output   dst_val_ce0;
output   dst_val_we0;
output  [7:0] dst_val_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_val_ce0;
reg dst_val_ce0;
reg dst_val_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] j_reg_493;
wire   [31:0] LineBuffer_cols_fu_504_p2;
reg   [31:0] LineBuffer_cols_reg_1552;
wire   [31:0] tmp_s_fu_510_p2;
reg   [31:0] tmp_s_reg_1557;
wire   [18:0] tmp_104_fu_516_p1;
reg   [18:0] tmp_104_reg_1562;
wire   [18:0] tmp_105_fu_520_p1;
reg   [18:0] tmp_105_reg_1567;
wire   [30:0] i_1_fu_533_p2;
reg   [30:0] i_1_reg_1575;
wire    ap_CS_fsm_state2;
reg   [0:0] tmp_106_reg_1580;
wire   [0:0] tmp_7_fu_528_p2;
wire   [0:0] icmp_fu_563_p2;
reg   [0:0] icmp_reg_1585;
wire  signed [18:0] tmp_108_fu_569_p1;
reg  signed [18:0] tmp_108_reg_1590;
wire  signed [18:0] tmp_112_fu_587_p3;
reg  signed [18:0] tmp_112_reg_1595;
wire  signed [18:0] tmp_109_fu_1286_p2;
reg  signed [18:0] tmp_109_reg_1600;
wire    ap_CS_fsm_state3;
wire   [18:0] tmp_20_fu_595_p3;
reg   [18:0] tmp_20_reg_1605;
wire   [0:0] exitcond4_fu_601_p2;
reg   [0:0] exitcond4_reg_1610;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] j_1_fu_606_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [8:0] LineBuffer_val_1_ad_reg_1619;
reg   [8:0] LineBuffer_val_2_ad_reg_1625;
reg   [8:0] LineBuffer_val_3_ad_reg_1631;
reg   [8:0] LineBuffer_val_4_ad_reg_1637;
wire   [0:0] or_cond_fu_690_p2;
reg   [0:0] or_cond_reg_1648;
reg   [0:0] or_cond_reg_1648_pp0_iter1_reg;
reg   [0:0] or_cond_reg_1648_pp0_iter2_reg;
wire   [18:0] tmp_24_fu_704_p2;
reg   [18:0] tmp_24_reg_1652;
reg   [18:0] tmp_24_reg_1652_pp0_iter1_reg;
reg   [18:0] tmp_24_reg_1652_pp0_iter2_reg;
wire   [31:0] p_Val2_7_0_3_fu_801_p2;
reg   [31:0] p_Val2_7_0_3_reg_1657;
wire   [31:0] p_Val2_7_1_4_fu_855_p2;
reg   [31:0] p_Val2_7_1_4_reg_1662;
wire   [31:0] p_Val2_7_2_fu_864_p2;
reg   [31:0] p_Val2_7_2_reg_1667;
wire   [31:0] p_Val2_7_2_1_fu_873_p2;
reg   [31:0] p_Val2_7_2_1_reg_1672;
wire   [31:0] p_Val2_7_2_2_fu_882_p2;
reg   [31:0] p_Val2_7_2_2_reg_1677;
wire   [31:0] p_Val2_7_2_3_fu_891_p2;
reg   [31:0] p_Val2_7_2_3_reg_1682;
wire   [31:0] p_Val2_7_2_4_fu_900_p2;
reg   [31:0] p_Val2_7_2_4_reg_1687;
wire   [31:0] p_Val2_7_3_fu_909_p2;
reg   [31:0] p_Val2_7_3_reg_1692;
wire   [31:0] p_Val2_7_3_3_fu_936_p2;
reg   [31:0] p_Val2_7_3_3_reg_1697;
wire   [31:0] p_Val2_7_3_4_fu_945_p2;
reg   [31:0] p_Val2_7_3_4_reg_1702;
wire   [31:0] p_Val2_7_4_fu_954_p2;
reg   [31:0] p_Val2_7_4_reg_1707;
wire   [31:0] tmp3_fu_1001_p2;
reg   [31:0] tmp3_reg_1712;
wire   [31:0] tmp6_fu_1007_p2;
reg   [31:0] tmp6_reg_1717;
wire   [31:0] tmp8_fu_1019_p2;
reg   [31:0] tmp8_reg_1722;
wire   [31:0] tmp17_fu_1025_p2;
reg   [31:0] tmp17_reg_1727;
wire   [31:0] tmp22_fu_1031_p2;
reg   [31:0] tmp22_reg_1732;
wire   [31:0] tmp23_fu_1037_p2;
reg   [31:0] tmp23_reg_1737;
wire   [31:0] p_Val2_8_4_4_fu_1216_p2;
reg   [31:0] p_Val2_8_4_4_reg_1742;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state5;
reg    ap_enable_reg_pp0_iter3;
wire   [8:0] LineBuffer_val_1_address0;
reg    LineBuffer_val_1_ce0;
wire   [7:0] LineBuffer_val_1_q0;
reg    LineBuffer_val_1_ce1;
reg    LineBuffer_val_1_we1;
wire   [8:0] LineBuffer_val_2_address0;
reg    LineBuffer_val_2_ce0;
wire   [7:0] LineBuffer_val_2_q0;
reg    LineBuffer_val_2_ce1;
reg    LineBuffer_val_2_we1;
wire   [8:0] LineBuffer_val_3_address0;
reg    LineBuffer_val_3_ce0;
wire   [7:0] LineBuffer_val_3_q0;
reg    LineBuffer_val_3_ce1;
reg    LineBuffer_val_3_we1;
wire   [8:0] LineBuffer_val_4_address0;
reg    LineBuffer_val_4_ce0;
wire   [7:0] LineBuffer_val_4_q0;
reg    LineBuffer_val_4_ce1;
reg    LineBuffer_val_4_we1;
reg   [30:0] i_reg_482;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_10_fu_612_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] tmp_21_cast_fu_669_p1;
wire  signed [63:0] tmp_24_cast_fu_1282_p1;
reg   [7:0] BlockBuffer_val_0_1_fu_130;
reg   [7:0] BlockBuffer_val_0_1_1_fu_134;
reg   [7:0] BlockBuffer_val_0_2_fu_138;
reg   [7:0] BlockBuffer_val_0_3_fu_142;
reg   [7:0] BlockBuffer_val_1_1_fu_146;
reg   [7:0] BlockBuffer_val_1_1_1_fu_150;
reg   [7:0] BlockBuffer_val_1_2_fu_154;
reg   [7:0] BlockBuffer_val_1_3_fu_158;
reg   [7:0] BlockBuffer_val_2_1_fu_162;
reg   [7:0] BlockBuffer_val_2_1_1_fu_166;
reg   [7:0] BlockBuffer_val_2_2_fu_170;
reg   [7:0] BlockBuffer_val_2_3_fu_174;
reg   [7:0] BlockBuffer_val_3_1_fu_178;
reg   [7:0] BlockBuffer_val_3_1_1_fu_182;
reg   [7:0] BlockBuffer_val_3_2_fu_186;
reg   [7:0] BlockBuffer_val_3_3_fu_190;
reg   [7:0] BlockBuffer_val_4_1_fu_194;
reg   [7:0] BlockBuffer_val_4_1_1_fu_198;
reg   [7:0] BlockBuffer_val_4_2_fu_202;
reg   [7:0] BlockBuffer_val_4_3_fu_206;
wire   [31:0] i_cast_fu_524_p1;
wire   [31:0] r_fu_539_p2;
wire   [28:0] tmp_107_fu_553_p4;
wire   [0:0] tmp_3_fu_573_p2;
wire   [18:0] tmp_110_fu_578_p1;
wire   [18:0] tmp_111_fu_582_p2;
wire  signed [18:0] p_op_fu_1291_p2;
wire   [31:0] c_fu_620_p2;
wire   [0:0] tmp_12_fu_634_p2;
wire   [18:0] tmp_114_fu_639_p1;
wire   [18:0] tmp_115_fu_643_p2;
wire   [0:0] tmp_113_fu_626_p3;
wire   [18:0] tmp_116_fu_648_p3;
wire   [18:0] tmp_117_fu_656_p3;
wire   [18:0] tmp_21_fu_664_p2;
wire   [29:0] tmp_118_fu_674_p4;
wire   [0:0] icmp4_fu_684_p2;
wire   [18:0] tmp_121_fu_695_p1;
(* use_dsp48 = "no" *) wire   [18:0] tmp_17_fu_699_p2;
wire  signed [31:0] p_Val2_7_fu_774_p0;
wire   [7:0] p_Val2_7_fu_774_p1;
wire  signed [31:0] p_Val2_7_0_1_fu_783_p0;
wire   [7:0] p_Val2_7_0_1_fu_783_p1;
wire  signed [31:0] p_Val2_7_0_2_fu_792_p0;
wire   [7:0] p_Val2_7_0_2_fu_792_p1;
wire  signed [31:0] p_Val2_7_0_3_fu_801_p0;
wire   [7:0] p_Val2_7_0_3_fu_801_p1;
wire  signed [31:0] p_Val2_7_0_4_fu_810_p0;
wire   [7:0] p_Val2_7_0_4_fu_810_p1;
wire  signed [31:0] p_Val2_7_1_fu_819_p0;
wire   [7:0] p_Val2_7_1_fu_819_p1;
wire  signed [31:0] p_Val2_7_1_1_fu_828_p0;
wire   [7:0] p_Val2_7_1_1_fu_828_p1;
wire  signed [31:0] p_Val2_7_1_2_fu_837_p0;
wire   [7:0] p_Val2_7_1_2_fu_837_p1;
wire  signed [31:0] p_Val2_7_1_3_fu_846_p0;
wire   [7:0] p_Val2_7_1_3_fu_846_p1;
wire  signed [31:0] p_Val2_7_1_4_fu_855_p0;
wire   [7:0] p_Val2_7_1_4_fu_855_p1;
wire  signed [31:0] p_Val2_7_2_fu_864_p0;
wire   [7:0] p_Val2_7_2_fu_864_p1;
wire  signed [31:0] p_Val2_7_2_1_fu_873_p0;
wire   [7:0] p_Val2_7_2_1_fu_873_p1;
wire  signed [31:0] p_Val2_7_2_2_fu_882_p0;
wire   [7:0] p_Val2_7_2_2_fu_882_p1;
wire  signed [31:0] p_Val2_7_2_3_fu_891_p0;
wire   [7:0] p_Val2_7_2_3_fu_891_p1;
wire  signed [31:0] p_Val2_7_2_4_fu_900_p0;
wire   [7:0] p_Val2_7_2_4_fu_900_p1;
wire  signed [31:0] p_Val2_7_3_fu_909_p0;
wire   [7:0] p_Val2_7_3_fu_909_p1;
wire  signed [31:0] p_Val2_7_3_1_fu_918_p0;
wire   [7:0] p_Val2_7_3_1_fu_918_p1;
wire  signed [31:0] p_Val2_7_3_2_fu_927_p0;
wire   [7:0] p_Val2_7_3_2_fu_927_p1;
wire  signed [31:0] p_Val2_7_3_3_fu_936_p0;
wire   [7:0] p_Val2_7_3_3_fu_936_p1;
wire  signed [31:0] p_Val2_7_3_4_fu_945_p0;
wire   [7:0] p_Val2_7_3_4_fu_945_p1;
wire  signed [31:0] p_Val2_7_4_fu_954_p0;
wire   [7:0] p_Val2_7_4_fu_954_p1;
wire  signed [31:0] p_Val2_7_4_1_fu_963_p0;
wire   [7:0] p_Val2_7_4_1_fu_963_p1;
wire  signed [31:0] p_Val2_7_4_2_fu_972_p0;
wire   [7:0] p_Val2_7_4_2_fu_972_p1;
wire  signed [31:0] p_Val2_7_4_3_fu_981_p0;
wire   [7:0] p_Val2_7_4_3_fu_981_p1;
wire  signed [31:0] p_Val2_7_4_4_fu_990_p0;
wire   [7:0] p_Val2_7_4_4_fu_990_p1;
wire   [31:0] p_Val2_7_0_2_fu_792_p2;
wire   [31:0] p_Val2_7_0_1_fu_783_p2;
wire   [31:0] p_Val2_7_fu_774_p2;
wire   [31:0] tmp4_fu_995_p2;
wire   [31:0] p_Val2_7_1_fu_819_p2;
wire   [31:0] p_Val2_7_0_4_fu_810_p2;
wire   [31:0] p_Val2_7_1_3_fu_846_p2;
wire   [31:0] p_Val2_7_1_2_fu_837_p2;
wire   [31:0] p_Val2_7_1_1_fu_828_p2;
wire   [31:0] tmp9_fu_1013_p2;
wire   [31:0] p_Val2_7_3_2_fu_927_p2;
wire   [31:0] p_Val2_7_3_1_fu_918_p2;
wire   [31:0] p_Val2_7_4_2_fu_972_p2;
wire   [31:0] p_Val2_7_4_1_fu_963_p2;
wire   [31:0] p_Val2_7_4_4_fu_990_p2;
wire   [31:0] p_Val2_7_4_3_fu_981_p2;
wire   [31:0] tmp5_fu_1143_p2;
wire   [31:0] tmp11_fu_1152_p2;
wire   [31:0] tmp10_fu_1156_p2;
wire   [31:0] tmp2_fu_1147_p2;
wire   [31:0] tmp7_fu_1161_p2;
wire   [31:0] tmp15_fu_1172_p2;
wire   [31:0] tmp14_fu_1176_p2;
wire   [31:0] tmp16_fu_1181_p2;
wire   [31:0] tmp20_fu_1191_p2;
wire   [31:0] tmp19_fu_1195_p2;
wire   [31:0] tmp21_fu_1200_p2;
wire   [31:0] tmp13_fu_1185_p2;
wire   [31:0] tmp18_fu_1204_p2;
wire   [31:0] tmp1_fu_1166_p2;
wire   [31:0] tmp12_fu_1210_p2;
wire  signed [32:0] tmp_15_fu_1222_p1;
wire   [32:0] r_V_fu_1225_p2;
wire   [21:0] tmp_120_fu_1239_p1;
wire   [7:0] tmp_35_fu_1249_p4;
wire   [0:0] tmp_16_fu_1243_p2;
wire   [7:0] tmp_36_fu_1259_p2;
wire   [0:0] tmp_119_fu_1231_p3;
wire   [7:0] tmp_37_fu_1265_p3;
wire   [9:0] tmp_109_fu_1286_p0;
wire   [9:0] p_op_fu_1291_p0;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] p_Val2_7_0_1_fu_783_p10;
wire   [31:0] p_Val2_7_0_2_fu_792_p10;
wire   [31:0] p_Val2_7_0_3_fu_801_p10;
wire   [31:0] p_Val2_7_0_4_fu_810_p10;
wire   [31:0] p_Val2_7_1_1_fu_828_p10;
wire   [31:0] p_Val2_7_1_2_fu_837_p10;
wire   [31:0] p_Val2_7_1_3_fu_846_p10;
wire   [31:0] p_Val2_7_1_4_fu_855_p10;
wire   [31:0] p_Val2_7_1_fu_819_p10;
wire   [31:0] p_Val2_7_2_1_fu_873_p10;
wire   [31:0] p_Val2_7_2_2_fu_882_p10;
wire   [31:0] p_Val2_7_2_3_fu_891_p10;
wire   [31:0] p_Val2_7_2_4_fu_900_p10;
wire   [31:0] p_Val2_7_2_fu_864_p10;
wire   [31:0] p_Val2_7_3_1_fu_918_p10;
wire   [31:0] p_Val2_7_3_2_fu_927_p10;
wire   [31:0] p_Val2_7_3_3_fu_936_p10;
wire   [31:0] p_Val2_7_3_4_fu_945_p10;
wire   [31:0] p_Val2_7_3_fu_909_p10;
wire   [31:0] p_Val2_7_4_1_fu_963_p10;
wire   [31:0] p_Val2_7_4_2_fu_972_p10;
wire   [31:0] p_Val2_7_4_3_fu_981_p10;
wire   [31:0] p_Val2_7_4_4_fu_990_p10;
wire   [31:0] p_Val2_7_4_fu_954_p10;
wire   [31:0] p_Val2_7_fu_774_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Filter2D_LineBuffhbi #(
    .DataWidth( 8 ),
    .AddressRange( 504 ),
    .AddressWidth( 9 ))
LineBuffer_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_1_address0),
    .ce0(LineBuffer_val_1_ce0),
    .q0(LineBuffer_val_1_q0),
    .address1(LineBuffer_val_1_ad_reg_1619),
    .ce1(LineBuffer_val_1_ce1),
    .we1(LineBuffer_val_1_we1),
    .d1(LineBuffer_val_2_q0)
);

Filter2D_LineBuffhbi #(
    .DataWidth( 8 ),
    .AddressRange( 504 ),
    .AddressWidth( 9 ))
LineBuffer_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_2_address0),
    .ce0(LineBuffer_val_2_ce0),
    .q0(LineBuffer_val_2_q0),
    .address1(LineBuffer_val_2_ad_reg_1625),
    .ce1(LineBuffer_val_2_ce1),
    .we1(LineBuffer_val_2_we1),
    .d1(LineBuffer_val_3_q0)
);

Filter2D_LineBuffhbi #(
    .DataWidth( 8 ),
    .AddressRange( 504 ),
    .AddressWidth( 9 ))
LineBuffer_val_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_3_address0),
    .ce0(LineBuffer_val_3_ce0),
    .q0(LineBuffer_val_3_q0),
    .address1(LineBuffer_val_3_ad_reg_1631),
    .ce1(LineBuffer_val_3_ce1),
    .we1(LineBuffer_val_3_we1),
    .d1(LineBuffer_val_4_q0)
);

Filter2D_LineBuffhbi #(
    .DataWidth( 8 ),
    .AddressRange( 504 ),
    .AddressWidth( 9 ))
LineBuffer_val_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(LineBuffer_val_4_address0),
    .ce0(LineBuffer_val_4_ce0),
    .q0(LineBuffer_val_4_q0),
    .address1(LineBuffer_val_4_ad_reg_1637),
    .ce1(LineBuffer_val_4_ce1),
    .we1(LineBuffer_val_4_we1),
    .d1(src_val_q0)
);

Filter2D_Core_mullbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
Filter2D_Core_mullbW_U50(
    .din0(tmp_109_fu_1286_p0),
    .din1(tmp_108_reg_1590),
    .dout(tmp_109_fu_1286_p2)
);

Filter2D_Core_mullbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
Filter2D_Core_mullbW_U51(
    .din0(p_op_fu_1291_p0),
    .din1(tmp_112_reg_1595),
    .dout(p_op_fu_1291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond4_fu_601_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state5)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_482 <= i_1_reg_1575;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_482 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_601_p2 == 1'd0))) begin
        j_reg_493 <= j_1_fu_606_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_493 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0))) begin
        BlockBuffer_val_0_1_1_fu_134 <= BlockBuffer_val_0_2_fu_138;
        BlockBuffer_val_0_1_fu_130 <= BlockBuffer_val_0_1_1_fu_134;
        BlockBuffer_val_0_2_fu_138 <= BlockBuffer_val_0_3_fu_142;
        BlockBuffer_val_0_3_fu_142 <= LineBuffer_val_1_q0;
        BlockBuffer_val_1_1_1_fu_150 <= BlockBuffer_val_1_2_fu_154;
        BlockBuffer_val_1_1_fu_146 <= BlockBuffer_val_1_1_1_fu_150;
        BlockBuffer_val_1_2_fu_154 <= BlockBuffer_val_1_3_fu_158;
        BlockBuffer_val_1_3_fu_158 <= LineBuffer_val_2_q0;
        BlockBuffer_val_2_1_1_fu_166 <= BlockBuffer_val_2_2_fu_170;
        BlockBuffer_val_2_1_fu_162 <= BlockBuffer_val_2_1_1_fu_166;
        BlockBuffer_val_2_2_fu_170 <= BlockBuffer_val_2_3_fu_174;
        BlockBuffer_val_2_3_fu_174 <= LineBuffer_val_3_q0;
        BlockBuffer_val_3_1_1_fu_182 <= BlockBuffer_val_3_2_fu_186;
        BlockBuffer_val_3_1_fu_178 <= BlockBuffer_val_3_1_1_fu_182;
        BlockBuffer_val_3_2_fu_186 <= BlockBuffer_val_3_3_fu_190;
        BlockBuffer_val_3_3_fu_190 <= LineBuffer_val_4_q0;
        BlockBuffer_val_4_1_1_fu_198 <= BlockBuffer_val_4_2_fu_202;
        BlockBuffer_val_4_1_fu_194 <= BlockBuffer_val_4_1_1_fu_198;
        BlockBuffer_val_4_2_fu_202 <= BlockBuffer_val_4_3_fu_206;
        BlockBuffer_val_4_3_fu_206 <= src_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        LineBuffer_cols_reg_1552 <= LineBuffer_cols_fu_504_p2;
        tmp_104_reg_1562 <= tmp_104_fu_516_p1;
        tmp_105_reg_1567 <= tmp_105_fu_520_p1;
        tmp_s_reg_1557 <= tmp_s_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_601_p2 == 1'd0))) begin
        LineBuffer_val_1_ad_reg_1619 <= tmp_10_fu_612_p1;
        LineBuffer_val_2_ad_reg_1625 <= tmp_10_fu_612_p1;
        LineBuffer_val_3_ad_reg_1631 <= tmp_10_fu_612_p1;
        LineBuffer_val_4_ad_reg_1637 <= tmp_10_fu_612_p1;
        or_cond_reg_1648 <= or_cond_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond4_reg_1610 <= exitcond4_fu_601_p2;
        or_cond_reg_1648_pp0_iter1_reg <= or_cond_reg_1648;
        tmp_24_reg_1652_pp0_iter1_reg <= tmp_24_reg_1652;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1575 <= i_1_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_528_p2 == 1'd1))) begin
        icmp_reg_1585 <= icmp_fu_563_p2;
        tmp_106_reg_1580 <= r_fu_539_p2[32'd31];
        tmp_108_reg_1590 <= tmp_108_fu_569_p1;
        tmp_112_reg_1595 <= tmp_112_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond_reg_1648_pp0_iter2_reg <= or_cond_reg_1648_pp0_iter1_reg;
        tmp_24_reg_1652_pp0_iter2_reg <= tmp_24_reg_1652_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0) & (or_cond_reg_1648 == 1'd1))) begin
        p_Val2_7_0_3_reg_1657 <= p_Val2_7_0_3_fu_801_p2;
        p_Val2_7_1_4_reg_1662 <= p_Val2_7_1_4_fu_855_p2;
        p_Val2_7_2_1_reg_1672 <= p_Val2_7_2_1_fu_873_p2;
        p_Val2_7_2_2_reg_1677 <= p_Val2_7_2_2_fu_882_p2;
        p_Val2_7_2_3_reg_1682 <= p_Val2_7_2_3_fu_891_p2;
        p_Val2_7_2_4_reg_1687 <= p_Val2_7_2_4_fu_900_p2;
        p_Val2_7_2_reg_1667 <= p_Val2_7_2_fu_864_p2;
        p_Val2_7_3_3_reg_1697 <= p_Val2_7_3_3_fu_936_p2;
        p_Val2_7_3_4_reg_1702 <= p_Val2_7_3_4_fu_945_p2;
        p_Val2_7_3_reg_1692 <= p_Val2_7_3_fu_909_p2;
        p_Val2_7_4_reg_1707 <= p_Val2_7_4_fu_954_p2;
        tmp17_reg_1727 <= tmp17_fu_1025_p2;
        tmp22_reg_1732 <= tmp22_fu_1031_p2;
        tmp23_reg_1737 <= tmp23_fu_1037_p2;
        tmp3_reg_1712 <= tmp3_fu_1001_p2;
        tmp6_reg_1717 <= tmp6_fu_1007_p2;
        tmp8_reg_1722 <= tmp8_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_1648_pp0_iter1_reg == 1'd1))) begin
        p_Val2_8_4_4_reg_1742 <= p_Val2_8_4_4_fu_1216_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_109_reg_1600 <= tmp_109_fu_1286_p2;
        tmp_20_reg_1605 <= tmp_20_fu_595_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_fu_601_p2 == 1'd0) & (or_cond_fu_690_p2 == 1'd1))) begin
        tmp_24_reg_1652 <= tmp_24_fu_704_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_1_ce0 = 1'b1;
    end else begin
        LineBuffer_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_1_ce1 = 1'b1;
    end else begin
        LineBuffer_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0))) begin
        LineBuffer_val_1_we1 = 1'b1;
    end else begin
        LineBuffer_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_2_ce0 = 1'b1;
    end else begin
        LineBuffer_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_2_ce1 = 1'b1;
    end else begin
        LineBuffer_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0))) begin
        LineBuffer_val_2_we1 = 1'b1;
    end else begin
        LineBuffer_val_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_3_ce0 = 1'b1;
    end else begin
        LineBuffer_val_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_3_ce1 = 1'b1;
    end else begin
        LineBuffer_val_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0))) begin
        LineBuffer_val_3_we1 = 1'b1;
    end else begin
        LineBuffer_val_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_4_ce0 = 1'b1;
    end else begin
        LineBuffer_val_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        LineBuffer_val_4_ce1 = 1'b1;
    end else begin
        LineBuffer_val_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond4_reg_1610 == 1'd0))) begin
        LineBuffer_val_4_we1 = 1'b1;
    end else begin
        LineBuffer_val_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_528_p2 == 1'd0)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_528_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_val_ce0 = 1'b1;
    end else begin
        dst_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_cond_reg_1648_pp0_iter2_reg == 1'd1))) begin
        dst_val_we0 = 1'b1;
    end else begin
        dst_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_val_ce0 = 1'b1;
    end else begin
        src_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_528_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LineBuffer_cols_fu_504_p2 = (32'd4 + src_cols_read);

assign LineBuffer_val_1_address0 = tmp_10_fu_612_p1;

assign LineBuffer_val_2_address0 = tmp_10_fu_612_p1;

assign LineBuffer_val_3_address0 = tmp_10_fu_612_p1;

assign LineBuffer_val_4_address0 = tmp_10_fu_612_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_620_p2 = ($signed(32'd4294967294) + $signed(j_reg_493));

assign dst_val_address0 = tmp_24_cast_fu_1282_p1;

assign dst_val_d0 = ((tmp_119_fu_1231_p3[0:0] === 1'b1) ? tmp_37_fu_1265_p3 : tmp_35_fu_1249_p4);

assign exitcond4_fu_601_p2 = ((j_reg_493 == LineBuffer_cols_reg_1552) ? 1'b1 : 1'b0);

assign i_1_fu_533_p2 = (i_reg_482 + 31'd1);

assign i_cast_fu_524_p1 = i_reg_482;

assign icmp4_fu_684_p2 = (($signed(tmp_118_fu_674_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_563_p2 = ((tmp_107_fu_553_p4 != 29'd0) ? 1'b1 : 1'b0);

assign j_1_fu_606_p2 = (j_reg_493 + 32'd1);

assign or_cond_fu_690_p2 = (icmp_reg_1585 & icmp4_fu_684_p2);

assign p_Val2_7_0_1_fu_783_p0 = kernel_val_0_V_1_read;

assign p_Val2_7_0_1_fu_783_p1 = p_Val2_7_0_1_fu_783_p10;

assign p_Val2_7_0_1_fu_783_p10 = BlockBuffer_val_0_1_1_fu_134;

assign p_Val2_7_0_1_fu_783_p2 = ($signed(p_Val2_7_0_1_fu_783_p0) * $signed({{1'b0}, {p_Val2_7_0_1_fu_783_p1}}));

assign p_Val2_7_0_2_fu_792_p0 = kernel_val_0_V_2_read;

assign p_Val2_7_0_2_fu_792_p1 = p_Val2_7_0_2_fu_792_p10;

assign p_Val2_7_0_2_fu_792_p10 = BlockBuffer_val_0_2_fu_138;

assign p_Val2_7_0_2_fu_792_p2 = ($signed(p_Val2_7_0_2_fu_792_p0) * $signed({{1'b0}, {p_Val2_7_0_2_fu_792_p1}}));

assign p_Val2_7_0_3_fu_801_p0 = kernel_val_0_V_3_read;

assign p_Val2_7_0_3_fu_801_p1 = p_Val2_7_0_3_fu_801_p10;

assign p_Val2_7_0_3_fu_801_p10 = BlockBuffer_val_0_3_fu_142;

assign p_Val2_7_0_3_fu_801_p2 = ($signed(p_Val2_7_0_3_fu_801_p0) * $signed({{1'b0}, {p_Val2_7_0_3_fu_801_p1}}));

assign p_Val2_7_0_4_fu_810_p0 = kernel_val_0_V_4_read;

assign p_Val2_7_0_4_fu_810_p1 = p_Val2_7_0_4_fu_810_p10;

assign p_Val2_7_0_4_fu_810_p10 = LineBuffer_val_1_q0;

assign p_Val2_7_0_4_fu_810_p2 = ($signed(p_Val2_7_0_4_fu_810_p0) * $signed({{1'b0}, {p_Val2_7_0_4_fu_810_p1}}));

assign p_Val2_7_1_1_fu_828_p0 = kernel_val_1_V_1_read;

assign p_Val2_7_1_1_fu_828_p1 = p_Val2_7_1_1_fu_828_p10;

assign p_Val2_7_1_1_fu_828_p10 = BlockBuffer_val_1_1_1_fu_150;

assign p_Val2_7_1_1_fu_828_p2 = ($signed(p_Val2_7_1_1_fu_828_p0) * $signed({{1'b0}, {p_Val2_7_1_1_fu_828_p1}}));

assign p_Val2_7_1_2_fu_837_p0 = kernel_val_1_V_2_read;

assign p_Val2_7_1_2_fu_837_p1 = p_Val2_7_1_2_fu_837_p10;

assign p_Val2_7_1_2_fu_837_p10 = BlockBuffer_val_1_2_fu_154;

assign p_Val2_7_1_2_fu_837_p2 = ($signed(p_Val2_7_1_2_fu_837_p0) * $signed({{1'b0}, {p_Val2_7_1_2_fu_837_p1}}));

assign p_Val2_7_1_3_fu_846_p0 = kernel_val_1_V_3_read;

assign p_Val2_7_1_3_fu_846_p1 = p_Val2_7_1_3_fu_846_p10;

assign p_Val2_7_1_3_fu_846_p10 = BlockBuffer_val_1_3_fu_158;

assign p_Val2_7_1_3_fu_846_p2 = ($signed(p_Val2_7_1_3_fu_846_p0) * $signed({{1'b0}, {p_Val2_7_1_3_fu_846_p1}}));

assign p_Val2_7_1_4_fu_855_p0 = kernel_val_1_V_4_read;

assign p_Val2_7_1_4_fu_855_p1 = p_Val2_7_1_4_fu_855_p10;

assign p_Val2_7_1_4_fu_855_p10 = LineBuffer_val_2_q0;

assign p_Val2_7_1_4_fu_855_p2 = ($signed(p_Val2_7_1_4_fu_855_p0) * $signed({{1'b0}, {p_Val2_7_1_4_fu_855_p1}}));

assign p_Val2_7_1_fu_819_p0 = kernel_val_1_V_0_read;

assign p_Val2_7_1_fu_819_p1 = p_Val2_7_1_fu_819_p10;

assign p_Val2_7_1_fu_819_p10 = BlockBuffer_val_1_1_fu_146;

assign p_Val2_7_1_fu_819_p2 = ($signed(p_Val2_7_1_fu_819_p0) * $signed({{1'b0}, {p_Val2_7_1_fu_819_p1}}));

assign p_Val2_7_2_1_fu_873_p0 = kernel_val_2_V_1_read;

assign p_Val2_7_2_1_fu_873_p1 = p_Val2_7_2_1_fu_873_p10;

assign p_Val2_7_2_1_fu_873_p10 = BlockBuffer_val_2_1_1_fu_166;

assign p_Val2_7_2_1_fu_873_p2 = ($signed(p_Val2_7_2_1_fu_873_p0) * $signed({{1'b0}, {p_Val2_7_2_1_fu_873_p1}}));

assign p_Val2_7_2_2_fu_882_p0 = kernel_val_2_V_2_read;

assign p_Val2_7_2_2_fu_882_p1 = p_Val2_7_2_2_fu_882_p10;

assign p_Val2_7_2_2_fu_882_p10 = BlockBuffer_val_2_2_fu_170;

assign p_Val2_7_2_2_fu_882_p2 = ($signed(p_Val2_7_2_2_fu_882_p0) * $signed({{1'b0}, {p_Val2_7_2_2_fu_882_p1}}));

assign p_Val2_7_2_3_fu_891_p0 = kernel_val_2_V_3_read;

assign p_Val2_7_2_3_fu_891_p1 = p_Val2_7_2_3_fu_891_p10;

assign p_Val2_7_2_3_fu_891_p10 = BlockBuffer_val_2_3_fu_174;

assign p_Val2_7_2_3_fu_891_p2 = ($signed(p_Val2_7_2_3_fu_891_p0) * $signed({{1'b0}, {p_Val2_7_2_3_fu_891_p1}}));

assign p_Val2_7_2_4_fu_900_p0 = kernel_val_2_V_4_read;

assign p_Val2_7_2_4_fu_900_p1 = p_Val2_7_2_4_fu_900_p10;

assign p_Val2_7_2_4_fu_900_p10 = LineBuffer_val_3_q0;

assign p_Val2_7_2_4_fu_900_p2 = ($signed(p_Val2_7_2_4_fu_900_p0) * $signed({{1'b0}, {p_Val2_7_2_4_fu_900_p1}}));

assign p_Val2_7_2_fu_864_p0 = kernel_val_2_V_0_read;

assign p_Val2_7_2_fu_864_p1 = p_Val2_7_2_fu_864_p10;

assign p_Val2_7_2_fu_864_p10 = BlockBuffer_val_2_1_fu_162;

assign p_Val2_7_2_fu_864_p2 = ($signed(p_Val2_7_2_fu_864_p0) * $signed({{1'b0}, {p_Val2_7_2_fu_864_p1}}));

assign p_Val2_7_3_1_fu_918_p0 = kernel_val_3_V_1_read;

assign p_Val2_7_3_1_fu_918_p1 = p_Val2_7_3_1_fu_918_p10;

assign p_Val2_7_3_1_fu_918_p10 = BlockBuffer_val_3_1_1_fu_182;

assign p_Val2_7_3_1_fu_918_p2 = ($signed(p_Val2_7_3_1_fu_918_p0) * $signed({{1'b0}, {p_Val2_7_3_1_fu_918_p1}}));

assign p_Val2_7_3_2_fu_927_p0 = kernel_val_3_V_2_read;

assign p_Val2_7_3_2_fu_927_p1 = p_Val2_7_3_2_fu_927_p10;

assign p_Val2_7_3_2_fu_927_p10 = BlockBuffer_val_3_2_fu_186;

assign p_Val2_7_3_2_fu_927_p2 = ($signed(p_Val2_7_3_2_fu_927_p0) * $signed({{1'b0}, {p_Val2_7_3_2_fu_927_p1}}));

assign p_Val2_7_3_3_fu_936_p0 = kernel_val_3_V_3_read;

assign p_Val2_7_3_3_fu_936_p1 = p_Val2_7_3_3_fu_936_p10;

assign p_Val2_7_3_3_fu_936_p10 = BlockBuffer_val_3_3_fu_190;

assign p_Val2_7_3_3_fu_936_p2 = ($signed(p_Val2_7_3_3_fu_936_p0) * $signed({{1'b0}, {p_Val2_7_3_3_fu_936_p1}}));

assign p_Val2_7_3_4_fu_945_p0 = kernel_val_3_V_4_read;

assign p_Val2_7_3_4_fu_945_p1 = p_Val2_7_3_4_fu_945_p10;

assign p_Val2_7_3_4_fu_945_p10 = LineBuffer_val_4_q0;

assign p_Val2_7_3_4_fu_945_p2 = ($signed(p_Val2_7_3_4_fu_945_p0) * $signed({{1'b0}, {p_Val2_7_3_4_fu_945_p1}}));

assign p_Val2_7_3_fu_909_p0 = kernel_val_3_V_0_read;

assign p_Val2_7_3_fu_909_p1 = p_Val2_7_3_fu_909_p10;

assign p_Val2_7_3_fu_909_p10 = BlockBuffer_val_3_1_fu_178;

assign p_Val2_7_3_fu_909_p2 = ($signed(p_Val2_7_3_fu_909_p0) * $signed({{1'b0}, {p_Val2_7_3_fu_909_p1}}));

assign p_Val2_7_4_1_fu_963_p0 = kernel_val_4_V_1_read;

assign p_Val2_7_4_1_fu_963_p1 = p_Val2_7_4_1_fu_963_p10;

assign p_Val2_7_4_1_fu_963_p10 = BlockBuffer_val_4_1_1_fu_198;

assign p_Val2_7_4_1_fu_963_p2 = ($signed(p_Val2_7_4_1_fu_963_p0) * $signed({{1'b0}, {p_Val2_7_4_1_fu_963_p1}}));

assign p_Val2_7_4_2_fu_972_p0 = kernel_val_4_V_2_read;

assign p_Val2_7_4_2_fu_972_p1 = p_Val2_7_4_2_fu_972_p10;

assign p_Val2_7_4_2_fu_972_p10 = BlockBuffer_val_4_2_fu_202;

assign p_Val2_7_4_2_fu_972_p2 = ($signed(p_Val2_7_4_2_fu_972_p0) * $signed({{1'b0}, {p_Val2_7_4_2_fu_972_p1}}));

assign p_Val2_7_4_3_fu_981_p0 = kernel_val_4_V_3_read;

assign p_Val2_7_4_3_fu_981_p1 = p_Val2_7_4_3_fu_981_p10;

assign p_Val2_7_4_3_fu_981_p10 = BlockBuffer_val_4_3_fu_206;

assign p_Val2_7_4_3_fu_981_p2 = ($signed(p_Val2_7_4_3_fu_981_p0) * $signed({{1'b0}, {p_Val2_7_4_3_fu_981_p1}}));

assign p_Val2_7_4_4_fu_990_p0 = kernel_val_4_V_4_read;

assign p_Val2_7_4_4_fu_990_p1 = p_Val2_7_4_4_fu_990_p10;

assign p_Val2_7_4_4_fu_990_p10 = src_val_q0;

assign p_Val2_7_4_4_fu_990_p2 = ($signed(p_Val2_7_4_4_fu_990_p0) * $signed({{1'b0}, {p_Val2_7_4_4_fu_990_p1}}));

assign p_Val2_7_4_fu_954_p0 = kernel_val_4_V_0_read;

assign p_Val2_7_4_fu_954_p1 = p_Val2_7_4_fu_954_p10;

assign p_Val2_7_4_fu_954_p10 = BlockBuffer_val_4_1_fu_194;

assign p_Val2_7_4_fu_954_p2 = ($signed(p_Val2_7_4_fu_954_p0) * $signed({{1'b0}, {p_Val2_7_4_fu_954_p1}}));

assign p_Val2_7_fu_774_p0 = kernel_val_0_V_0_read;

assign p_Val2_7_fu_774_p1 = p_Val2_7_fu_774_p10;

assign p_Val2_7_fu_774_p10 = BlockBuffer_val_0_1_fu_130;

assign p_Val2_7_fu_774_p2 = ($signed(p_Val2_7_fu_774_p0) * $signed({{1'b0}, {p_Val2_7_fu_774_p1}}));

assign p_Val2_8_4_4_fu_1216_p2 = (tmp1_fu_1166_p2 + tmp12_fu_1210_p2);

assign p_op_fu_1291_p0 = 19'd500;

assign r_V_fu_1225_p2 = ($signed(33'd2097152) + $signed(tmp_15_fu_1222_p1));

assign r_fu_539_p2 = ($signed(32'd4294967294) + $signed(i_cast_fu_524_p1));

assign src_val_address0 = tmp_21_cast_fu_669_p1;

assign tmp10_fu_1156_p2 = (p_Val2_7_1_4_reg_1662 + tmp11_fu_1152_p2);

assign tmp11_fu_1152_p2 = (p_Val2_7_2_1_reg_1672 + p_Val2_7_2_reg_1667);

assign tmp12_fu_1210_p2 = (tmp13_fu_1185_p2 + tmp18_fu_1204_p2);

assign tmp13_fu_1185_p2 = (tmp14_fu_1176_p2 + tmp16_fu_1181_p2);

assign tmp14_fu_1176_p2 = (p_Val2_7_2_2_reg_1677 + tmp15_fu_1172_p2);

assign tmp15_fu_1172_p2 = (p_Val2_7_2_4_reg_1687 + p_Val2_7_2_3_reg_1682);

assign tmp16_fu_1181_p2 = (p_Val2_7_3_reg_1692 + tmp17_reg_1727);

assign tmp17_fu_1025_p2 = (p_Val2_7_3_2_fu_927_p2 + p_Val2_7_3_1_fu_918_p2);

assign tmp18_fu_1204_p2 = (tmp19_fu_1195_p2 + tmp21_fu_1200_p2);

assign tmp19_fu_1195_p2 = (p_Val2_7_3_3_reg_1697 + tmp20_fu_1191_p2);

assign tmp1_fu_1166_p2 = (tmp2_fu_1147_p2 + tmp7_fu_1161_p2);

assign tmp20_fu_1191_p2 = (p_Val2_7_4_reg_1707 + p_Val2_7_3_4_reg_1702);

assign tmp21_fu_1200_p2 = (tmp22_reg_1732 + tmp23_reg_1737);

assign tmp22_fu_1031_p2 = (p_Val2_7_4_2_fu_972_p2 + p_Val2_7_4_1_fu_963_p2);

assign tmp23_fu_1037_p2 = (p_Val2_7_4_4_fu_990_p2 + p_Val2_7_4_3_fu_981_p2);

assign tmp2_fu_1147_p2 = (tmp3_reg_1712 + tmp5_fu_1143_p2);

assign tmp3_fu_1001_p2 = (p_Val2_7_fu_774_p2 + tmp4_fu_995_p2);

assign tmp4_fu_995_p2 = (p_Val2_7_0_2_fu_792_p2 + p_Val2_7_0_1_fu_783_p2);

assign tmp5_fu_1143_p2 = (p_Val2_7_0_3_reg_1657 + tmp6_reg_1717);

assign tmp6_fu_1007_p2 = (p_Val2_7_1_fu_819_p2 + p_Val2_7_0_4_fu_810_p2);

assign tmp7_fu_1161_p2 = (tmp8_reg_1722 + tmp10_fu_1156_p2);

assign tmp8_fu_1019_p2 = (p_Val2_7_1_1_fu_828_p2 + tmp9_fu_1013_p2);

assign tmp9_fu_1013_p2 = (p_Val2_7_1_3_fu_846_p2 + p_Val2_7_1_2_fu_837_p2);

assign tmp_104_fu_516_p1 = src_cols_read[18:0];

assign tmp_105_fu_520_p1 = src_rows_read[18:0];

assign tmp_107_fu_553_p4 = {{i_reg_482[30:2]}};

assign tmp_108_fu_569_p1 = i_reg_482[18:0];

assign tmp_109_fu_1286_p0 = 19'd500;

assign tmp_10_fu_612_p1 = j_reg_493;

assign tmp_110_fu_578_p1 = r_fu_539_p2[18:0];

assign tmp_111_fu_582_p2 = ($signed(19'd524287) + $signed(tmp_105_reg_1567));

assign tmp_112_fu_587_p3 = ((tmp_3_fu_573_p2[0:0] === 1'b1) ? tmp_110_fu_578_p1 : tmp_111_fu_582_p2);

assign tmp_113_fu_626_p3 = c_fu_620_p2[32'd31];

assign tmp_114_fu_639_p1 = c_fu_620_p2[18:0];

assign tmp_115_fu_643_p2 = ($signed(19'd524287) + $signed(tmp_104_reg_1562));

assign tmp_116_fu_648_p3 = ((tmp_12_fu_634_p2[0:0] === 1'b1) ? tmp_114_fu_639_p1 : tmp_115_fu_643_p2);

assign tmp_117_fu_656_p3 = ((tmp_113_fu_626_p3[0:0] === 1'b1) ? 19'd0 : tmp_116_fu_648_p3);

assign tmp_118_fu_674_p4 = {{j_reg_493[31:2]}};

assign tmp_119_fu_1231_p3 = r_V_fu_1225_p2[32'd32];

assign tmp_120_fu_1239_p1 = r_V_fu_1225_p2[21:0];

assign tmp_121_fu_695_p1 = j_reg_493[18:0];

assign tmp_12_fu_634_p2 = (($signed(c_fu_620_p2) < $signed(src_cols_read)) ? 1'b1 : 1'b0);

assign tmp_15_fu_1222_p1 = $signed(p_Val2_8_4_4_reg_1742);

assign tmp_16_fu_1243_p2 = ((tmp_120_fu_1239_p1 == 22'd0) ? 1'b1 : 1'b0);

assign tmp_17_fu_699_p2 = ($signed(tmp_109_reg_1600) + $signed(tmp_121_fu_695_p1));

assign tmp_20_fu_595_p3 = ((tmp_106_reg_1580[0:0] === 1'b1) ? 19'd0 : p_op_fu_1291_p2);

assign tmp_21_cast_fu_669_p1 = $signed(tmp_21_fu_664_p2);

assign tmp_21_fu_664_p2 = (tmp_117_fu_656_p3 + tmp_20_reg_1605);

assign tmp_24_cast_fu_1282_p1 = $signed(tmp_24_reg_1652_pp0_iter2_reg);

assign tmp_24_fu_704_p2 = ($signed(19'd522284) + $signed(tmp_17_fu_699_p2));

assign tmp_35_fu_1249_p4 = {{r_V_fu_1225_p2[29:22]}};

assign tmp_36_fu_1259_p2 = (8'd1 + tmp_35_fu_1249_p4);

assign tmp_37_fu_1265_p3 = ((tmp_16_fu_1243_p2[0:0] === 1'b1) ? tmp_35_fu_1249_p4 : tmp_36_fu_1259_p2);

assign tmp_3_fu_573_p2 = (($signed(r_fu_539_p2) < $signed(src_rows_read)) ? 1'b1 : 1'b0);

assign tmp_7_fu_528_p2 = (($signed(i_cast_fu_524_p1) < $signed(tmp_s_reg_1557)) ? 1'b1 : 1'b0);

assign tmp_s_fu_510_p2 = (32'd4 + src_rows_read);

endmodule //Filter2D

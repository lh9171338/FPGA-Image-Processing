// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Mat2Array2D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        mat_rows_V_dout,
        mat_rows_V_empty_n,
        mat_rows_V_read,
        mat_cols_V_dout,
        mat_cols_V_empty_n,
        mat_cols_V_read,
        mat_data_stream_V_dout,
        mat_data_stream_V_empty_n,
        mat_data_stream_V_read,
        arr_val_address0,
        arr_val_ce0,
        arr_val_we0,
        arr_val_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] mat_rows_V_dout;
input   mat_rows_V_empty_n;
output   mat_rows_V_read;
input  [31:0] mat_cols_V_dout;
input   mat_cols_V_empty_n;
output   mat_cols_V_read;
input  [7:0] mat_data_stream_V_dout;
input   mat_data_stream_V_empty_n;
output   mat_data_stream_V_read;
output  [17:0] arr_val_address0;
output   arr_val_ce0;
output   arr_val_we0;
output  [7:0] arr_val_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg mat_rows_V_read;
reg mat_cols_V_read;
reg mat_data_stream_V_read;
reg arr_val_ce0;
reg arr_val_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mat_rows_V_blk_n;
reg    mat_cols_V_blk_n;
reg    mat_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_3_i_reg_199;
reg   [30:0] j_i_reg_106;
reg   [31:0] rows_reg_170;
reg    ap_block_state1;
reg   [31:0] cols_reg_175;
wire   [18:0] tmp_fu_117_p1;
reg   [18:0] tmp_reg_180;
wire    ap_CS_fsm_state2;
wire   [39:0] next_mul_fu_121_p2;
reg   [39:0] next_mul_reg_185;
wire   [0:0] tmp_i_fu_131_p2;
wire   [30:0] i_fu_136_p2;
reg   [30:0] i_reg_194;
wire   [0:0] tmp_3_i_fu_146_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] j_fu_151_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [18:0] tmp_2_fu_161_p2;
reg   [18:0] tmp_2_reg_208;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [30:0] i_i_reg_84;
wire    ap_CS_fsm_state5;
reg   [39:0] phi_mul_reg_95;
wire   [63:0] tmp_2_cast_fu_166_p1;
wire   [31:0] i_cast_i_fu_127_p1;
wire   [31:0] j_cast_i_fu_142_p1;
wire   [18:0] tmp_103_fu_157_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_84 <= i_reg_194;
    end else if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_84 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_i_reg_106 <= 31'd0;
    end else if (((tmp_3_i_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_i_reg_106 <= j_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul_reg_95 <= next_mul_reg_185;
    end else if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_95 <= 40'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_reg_175 <= mat_cols_V_dout;
        rows_reg_170 <= mat_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_194 <= i_fu_136_p2;
        next_mul_reg_185 <= next_mul_fu_121_p2;
        tmp_reg_180 <= tmp_fu_117_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_i_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_208 <= tmp_2_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_i_reg_199 <= tmp_3_i_fu_146_p2;
    end
end

always @ (*) begin
    if ((tmp_3_i_fu_146_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arr_val_ce0 = 1'b1;
    end else begin
        arr_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_199 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arr_val_we0 = 1'b1;
    end else begin
        arr_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_blk_n = mat_cols_V_empty_n;
    end else begin
        mat_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_cols_V_read = 1'b1;
    end else begin
        mat_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_199 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mat_data_stream_V_blk_n = mat_data_stream_V_empty_n;
    end else begin
        mat_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_3_i_reg_199 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mat_data_stream_V_read = 1'b1;
    end else begin
        mat_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_blk_n = mat_rows_V_empty_n;
    end else begin
        mat_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mat_rows_V_read = 1'b1;
    end else begin
        mat_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_3_i_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_3_i_fu_146_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((tmp_3_i_reg_199 == 1'd1) & (mat_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((tmp_3_i_reg_199 == 1'd1) & (mat_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (mat_cols_V_empty_n == 1'b0) | (mat_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((tmp_3_i_reg_199 == 1'd1) & (mat_data_stream_V_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign arr_val_address0 = tmp_2_cast_fu_166_p1;

assign arr_val_d0 = mat_data_stream_V_dout;

assign i_cast_i_fu_127_p1 = i_i_reg_84;

assign i_fu_136_p2 = (31'd1 + i_i_reg_84);

assign j_cast_i_fu_142_p1 = j_i_reg_106;

assign j_fu_151_p2 = (j_i_reg_106 + 31'd1);

assign next_mul_fu_121_p2 = (40'd500 + phi_mul_reg_95);

assign tmp_103_fu_157_p1 = j_i_reg_106[18:0];

assign tmp_2_cast_fu_166_p1 = tmp_2_reg_208;

assign tmp_2_fu_161_p2 = (tmp_reg_180 + tmp_103_fu_157_p1);

assign tmp_3_i_fu_146_p2 = (($signed(j_cast_i_fu_142_p1) < $signed(cols_reg_175)) ? 1'b1 : 1'b0);

assign tmp_fu_117_p1 = phi_mul_reg_95[18:0];

assign tmp_i_fu_131_p2 = (($signed(i_cast_i_fu_127_p1) < $signed(rows_reg_170)) ? 1'b1 : 1'b0);

endmodule //Mat2Array2D
